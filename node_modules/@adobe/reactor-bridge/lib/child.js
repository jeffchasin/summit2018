'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; /***************************************************************************************
                                                                                                                                                                                                                                                                               * (c) 2017 Adobe. All rights reserved.
                                                                                                                                                                                                                                                                               * This file is licensed to you under the Apache License, Version 2.0 (the "License");
                                                                                                                                                                                                                                                                               * you may not use this file except in compliance with the License. You may obtain a copy
                                                                                                                                                                                                                                                                               * of the License at http://www.apache.org/licenses/LICENSE-2.0
                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                               * Unless required by applicable law or agreed to in writing, software distributed under
                                                                                                                                                                                                                                                                               * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
                                                                                                                                                                                                                                                                               * OF ANY KIND, either express or implied. See the License for the specific language
                                                                                                                                                                                                                                                                               * governing permissions and limitations under the License.
                                                                                                                                                                                                                                                                               ****************************************************************************************/

var _penpal = require('penpal');

var _penpal2 = _interopRequireDefault(_penpal);

var _promisePolyfill = require('promise-polyfill');

var _promisePolyfill2 = _interopRequireDefault(_promisePolyfill);

var _logger = require('./utils/logger');

var _logger2 = _interopRequireDefault(_logger);

var _addStylesToPage = require('./utils/addStylesToPage');

var _addStylesToPage2 = _interopRequireDefault(_addStylesToPage);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var STYLES = '\n  html, body {\n    background-color: transparent !important;\n  }\n';

(0, _addStylesToPage2.default)(STYLES);

_penpal2.default.Promise = _promisePolyfill2.default;

var logger = new _logger2.default('ExtensionBridge:Child');
var extensionViewMethods = {};
var connectionPromise = void 0;

var getExtensionViewMethod = function getExtensionViewMethod(methodName) {
  var method = extensionViewMethods[methodName];
  if (method) {
    return method.bind(extensionViewMethods);
  } else {
    throw new Error('Unable to call ' + methodName + ' on the extension. The extension must register a ' + methodName + ' function using extensionBridge.register().');
  }
};

var init = function init() {
  getExtensionViewMethod('init').apply(undefined, arguments);
};

var validate = function validate() {
  var result = getExtensionViewMethod('validate').apply(undefined, arguments);

  if (typeof result !== 'boolean') {
    throw new Error('The extension attempted to return a non-boolean value from validate: ' + result);
  }

  return result;
};

var getSettings = function getSettings() {
  var result = getExtensionViewMethod('getSettings').apply(undefined, arguments);

  if ((typeof result === 'undefined' ? 'undefined' : _typeof(result)) !== 'object') {
    throw new Error('The extension attempted to return a non-object value from getSettings: ' + result);
  }

  return result;
};

var wrapOpenSharedViewMethod = function wrapOpenSharedViewMethod(methodName, sharedViewName) {
  return function () {
    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var callback = args.shift();

    if (!callback) {
      throw new Error('A callback is required when opening a shared view.');
    }

    connectionPromise.then(function (parent) {
      if (parent[methodName]) {
        parent[methodName].apply(parent, args).then(callback);
      } else {
        throw new Error('An error occurred while opening ' + sharedViewName + '. The shared view is unavailable.');
      }
    });
  };
};

connectionPromise = _penpal2.default.connectToParent({
  methods: {
    init: init,
    validate: validate,
    getSettings: getSettings
  }
}).promise;

var extensionBridge = {
  openCodeEditor: wrapOpenSharedViewMethod('openCodeEditor', 'code editor'),
  openDataElementSelector: wrapOpenSharedViewMethod('openDataElementSelector', 'data element selector'),
  openCssSelector: wrapOpenSharedViewMethod('openCssSelector', 'CSS selector'),
  openRegexTester: wrapOpenSharedViewMethod('openRegexTester', 'regex tester'),
  register: function register(methods) {
    extensionViewMethods = _extends({}, methods);
    connectionPromise.then(function (parent) {
      return parent.extensionRegistered();
    });
    logger.log('Methods registered by extension.');
  },
  setDebug: function setDebug(value) {
    _penpal2.default.debug = value;
    _logger2.default.enabled = value;
  }
};

window.addEventListener('focus', function () {
  connectionPromise.then(function (parent) {
    return parent.markAsDirty();
  });
});

var executeQueuedCall = function executeQueuedCall(call) {
  extensionBridge[call.methodName].apply(null, call.args);
};

var callQueue = window.extensionBridge._callQueue;

while (callQueue.length) {
  executeQueuedCall(callQueue.shift());
}

callQueue.push = executeQueuedCall;